# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class GenomeAnnotationFileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def genbank_to_genome_annotation(self, params, context=None):
        """
        :param params: instance of type "GenbankToGenomeAnnotationParams"
           (file_path or shock_id -- Local path or shock_id of the uploaded
           file with genome sequence in GenBank format or zip-file with
           GenBank files. genome_name -- The name you would like to use to
           reference this GenomeAnnotation. If not supplied, will use the
           Taxon Id and the data source to determine the name. taxon_wsname -
           name of the workspace containing the Taxonomy data, defaults to
           'ReferenceTaxons') -> structure: parameter "file_path" of String,
           parameter "shock_id" of String, parameter "ftp_url" of String,
           parameter "genome_name" of String, parameter "workspace_name" of
           String, parameter "source" of String, parameter "taxon_wsname" of
           String, parameter "convert_to_legacy" of type "boolean" (A boolean
           - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "GenomeAnnotationDetails" -> structure:
           parameter "genome_annotation_ref" of String
        """
        return self._client.call_method(
            'GenomeAnnotationFileUtil.genbank_to_genome_annotation',
            [params], self._service_ver, context)

    def genome_annotation_to_genbank(self, params, context=None):
        """
        :param params: instance of type "GenomeAnnotationToGenbankParams"
           (genome_ref -- Reference to the GenomeAnnotation or Genome object
           in KBase in any ws supported format OR genome_name +
           workspace_name -- specifiy the genome name and workspace name of
           what you want.  If genome_ref is defined, these args are ignored.
           new_genbank_file_name -- specify the output name of the genbank
           file, optional save_to_shock -- set to 1 or 0, if 1 then output is
           saved to shock. default is zero) -> structure: parameter
           "genome_ref" of String, parameter "genome_name" of String,
           parameter "workspace_name" of String, parameter
           "new_genbank_file_name" of String, parameter "save_to_shock" of
           type "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "GenbankFile" -> structure: parameter
           "path" of String, parameter "shock_id" of String
        """
        return self._client.call_method(
            'GenomeAnnotationFileUtil.genome_annotation_to_genbank',
            [params], self._service_ver, context)

    def export_genome_annotation_as_genbank(self, params, context=None):
        """
        A method designed especially for download, this calls 'genome_annotation_to_genbank' to do
        the work, but then packages the output with WS provenance and object info into
        a zip file and saves to shock.
        :param params: instance of type "ExportParams" -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        return self._client.call_method(
            'GenomeAnnotationFileUtil.export_genome_annotation_as_genbank',
            [params], self._service_ver, context)

    def load_new_genome_data(self, params, context=None):
        """
        :param params: instance of type "LoadNewGenomeDataParams" ->
           structure: parameter "genome_ref" of String
        :returns: instance of type "GenomeData" (scientific_name - scientific
           name of the organism. taxonomy_id - NCBI taxonomic id of the
           organism. kingdom - taxonomic kingdom of the organism.
           scientific_lineage - scientific lineage of the organism.
           genetic_code - scientific name of the organism. organism_aliases -
           aliases for the organism associated with this GenomeAnnotation.
           assembly_source - source organization for the Assembly.
           assembly_source_id - identifier for the Assembly used by the
           source organization. assembly_source_date - date of origin the
           source indicates for the Assembly. gc_content - GC content for the
           entire Assembly. dna_size - total DNA size for the Assembly.
           num_contigs - number of contigs in the Assembly. contig_ids -
           contig identifier strings for the Assembly. external_source - name
           of the external source. external_source_date - date of origin the
           external source indicates for this GenomeAnnotation. release -
           release version for this GenomeAnnotation data.
           original_source_filename - name of the file used to generate this
           GenomeAnnotation. feature_type_counts - number of features of each
           type.) -> structure: parameter "scientific_name" of String,
           parameter "taxonomy_id" of Long, parameter "kingdom" of String,
           parameter "scientific_lineage" of list of String, parameter
           "genetic_code" of Long, parameter "organism_aliases" of list of
           String, parameter "assembly_source" of String, parameter
           "assembly_source_id" of String, parameter "assembly_source_date"
           of String, parameter "gc_content" of Double, parameter "dna_size"
           of Long, parameter "num_contigs" of Long, parameter "contig_ids"
           of list of String, parameter "external_source" of String,
           parameter "external_source_date" of String, parameter "release" of
           String, parameter "original_source_filename" of String, parameter
           "feature_type_counts" of mapping from String to Long, parameter
           "features" of list of type "FeatureData" (feature_id - identifier
           for this feature feature_type - the Feature type e.g., "mRNA",
           "CDS", "gene", ... feature_function - the functional annotation
           description feature_aliases - dictionary of Alias string to List
           of source string identifiers feature_dna_sequence_length - integer
           representing the length of the DNA sequence for convenience
           feature_dna_sequence - string containing the DNA sequence of the
           Feature feature_md5 - string containing the MD5 of the sequence,
           calculated from the uppercase string feature_locations - list of
           Feature regions, where the Feature bounds are calculated as
           follows: - For "+" strand, [start, start + length) - For "-"
           strand, (start - length, start] feature_publications - ist of any
           known publications related to this Feature
           feature_quality_warnings - list of strings indicating known data
           quality issues (note: not used for Genome type, but is used for
           GenomeAnnotation) feature_quality_score - quality value with
           unknown algorithm for Genomes, not calculated yet for
           GenomeAnnotations. feature_notes - notes recorded about this
           Feature feature_inference - inference information) -> structure:
           parameter "feature_id" of String, parameter "feature_type" of
           String, parameter "feature_function" of String, parameter
           "feature_aliases" of mapping from String to list of String,
           parameter "feature_dna_sequence_length" of Long, parameter
           "feature_dna_sequence" of String, parameter "feature_md5" of
           String, parameter "feature_locations" of list of type "Region"
           (contig_id - the identifier for the contig to which this region
           corresponds. strand - either a "+" or a "-", for the strand on
           which the region is located. start - starting position for this
           region. length - distance from the start position that bounds the
           end of the region.) -> structure: parameter "contig_id" of String,
           parameter "strand" of String, parameter "start" of Long, parameter
           "length" of Long, parameter "feature_publications" of list of
           String, parameter "feature_quality_warnings" of list of String,
           parameter "feature_quality_score" of list of String, parameter
           "feature_notes" of String, parameter "feature_inference" of
           String, parameter "protein" of type "ProteinData" (protein_id -
           protein identifier, which is feature ID plus ".protein"
           protein_amino_acid_sequence - amino acid sequence for this protein
           protein_function - function of protein protein_aliases - list of
           aliases for the protein protein_md5 - MD5 hash of the protein
           translation (uppercase)) -> structure: parameter "protein_id" of
           String, parameter "protein_amino_acid_sequence" of String,
           parameter "protein_function" of String, parameter
           "protein_aliases" of list of String, parameter "protein_md5" of
           String, parameter "protein_domain_locations" of list of String
        """
        return self._client.call_method(
            'GenomeAnnotationFileUtil.load_new_genome_data',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('GenomeAnnotationFileUtil.status',
            [], self._service_ver, context)
